<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=windows-1252">
<!-- Generated by javadoc (1.8.0_60) on Tue Aug 04 12:26:34 PDT 2015 -->
<title>String (Java Platform SE 8 )</title>
<meta name="date" content="2015-08-04">
<meta name="keywords" content="java.lang.String class">
<meta name="keywords" content="CASE_INSENSITIVE_ORDER">
<meta name="keywords" content="length()">
<meta name="keywords" content="isEmpty()">
<meta name="keywords" content="charAt()">
<meta name="keywords" content="codePointAt()">
<meta name="keywords" content="codePointBefore()">
<meta name="keywords" content="codePointCount()">
<meta name="keywords" content="offsetByCodePoints()">
<meta name="keywords" content="getChars()">
<meta name="keywords" content="getBytes()">
<meta name="keywords" content="equals()">
<meta name="keywords" content="contentEquals()">
<meta name="keywords" content="equalsIgnoreCase()">
<meta name="keywords" content="compareTo()">
<meta name="keywords" content="compareToIgnoreCase()">
<meta name="keywords" content="regionMatches()">
<meta name="keywords" content="startsWith()">
<meta name="keywords" content="endsWith()">
<meta name="keywords" content="hashCode()">
<meta name="keywords" content="indexOf()">
<meta name="keywords" content="lastIndexOf()">
<meta name="keywords" content="substring()">
<meta name="keywords" content="subSequence()">
<meta name="keywords" content="concat()">
<meta name="keywords" content="replace()">
<meta name="keywords" content="matches()">
<meta name="keywords" content="contains()">
<meta name="keywords" content="replaceFirst()">
<meta name="keywords" content="replaceAll()">
<meta name="keywords" content="split()">
<meta name="keywords" content="join()">
<meta name="keywords" content="toLowerCase()">
<meta name="keywords" content="toUpperCase()">
<meta name="keywords" content="trim()">
<meta name="keywords" content="toString()">
<meta name="keywords" content="toCharArray()">
<meta name="keywords" content="format()">
<meta name="keywords" content="valueOf()">
<meta name="keywords" content="copyValueOf()">
<meta name="keywords" content="intern()">
<link rel="stylesheet" type="text/css" href="StringJavaSE8-Dateien/stylesheet.css" title="Style">
<script type="text/javascript" src="StringJavaSE8-Dateien/script.js"></script>
</head>
<body>
<script type="text/javascript"><!--
    try {
        if (location.href.indexOf('is-external=true') == -1) {
            parent.document.title="String (Java Platform SE 8 )";
        }
    }
    catch(err) {
    }
//-->
var methods = {"i0":10,"i1":10,"i2":10,"i3":10,"i4":10,"i5":10,"i6":10,"i7":10,"i8":10,"i9":10,"i10":9,"i11":9,"i12":10,"i13":10,"i14":10,"i15":9,"i16":9,"i17":10,"i18":10,"i19":42,"i20":10,"i21":10,"i22":10,"i23":10,"i24":10,"i25":10,"i26":10,"i27":10,"i28":10,"i29":9,"i30":9,"i31":10,"i32":10,"i33":10,"i34":10,"i35":10,"i36":10,"i37":10,"i38":10,"i39":10,"i40":10,"i41":10,"i42":10,"i43":10,"i44":10,"i45":10,"i46":10,"i47":10,"i48":10,"i49":10,"i50":10,"i51":10,"i52":10,"i53":10,"i54":10,"i55":10,"i56":10,"i57":10,"i58":9,"i59":9,"i60":9,"i61":9,"i62":9,"i63":9,"i64":9,"i65":9,"i66":9};
var tabs = {65535:["t0","All Methods"],1:["t1","Static Methods"],2:["t2","Instance Methods"],8:["t4","Concrete Methods"],32:["t6","Deprecated Methods"]};
var altColor = "altColor";
var rowColor = "rowColor";
var tableTab = "tableTab";
var activeTableTab = "activeTableTab";
</script>
<noscript>
<div>JavaScript is disabled on your browser.</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar.top">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.top" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.top.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="http://docs.oracle.com/javase/8/docs/api/overview-summary.html">Overview</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/class-use/String.html">Use</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/package-tree.html">Tree</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/deprecated-list.html">Deprecated</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/index-files/index-1.html">Index</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><strong>Java™&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StrictMath.html" title="class in java.lang"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html" title="class in java.lang"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="http://docs.oracle.com/javase/8/docs/api/index.html?java/lang/String.html" target="_top">Frames</a></li>
<li><a href="StringJavaSE8.htm" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul style="display: block;" class="navList" id="allclasses_navbar_top">
<li><a href="http://docs.oracle.com/javase/8/docs/api/allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">java.lang</div>
<h2 title="Class String" class="title">Class String</h2>
</div>
<div class="contentContainer">
<div class="description">
<ul class="blockList">
<li class="blockList">
<br>
<pre>public final class <span class="typeNameLabel">String</span>
</pre>
<div class="block">The <code>String</code> class represents character strings. All
 string literals in Java programs, such as <code>"abc"</code>, are
 implemented as instances of this class.
 <p>
 Strings are constant; their values cannot be changed after they
 are created.
 </p>
 
 <p>
 Here are some examples of how strings can be used:
 </p><blockquote><pre>     System.out.println("abc");
     String cde = "cde";
     System.out.println("abc" + cde);
     String c = "abc".substring(2,3);
     String d = cde.substring(1, 2);
 </pre></blockquote>
 <p>
 The class <code>String</code> includes methods for examining
 individual characters of the sequence, for comparing strings, for
 searching strings, for extracting substrings, and for creating a
 copy of a string with all characters translated to uppercase or to
 lowercase. Case mapping is based on the Unicode Standard version
 specified by the <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html" title="class in java.lang"><code>Character</code></a> class.
 </p><p>
 The Java language provides special support for the string
 concatenation operator (&nbsp;+&nbsp;), and for conversion of
 other objects to strings. (...) For additional information on
 string concatenation and conversion, see Gosling, Joy, and Steele,
 <i>The Java Language Specification</i>.

 </p><p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
 or method in this class will cause a <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/NullPointerException.html" title="class in java.lang"><code>NullPointerException</code></a> to be
 thrown.

 </p>
 </div>
<dl>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>JDK1.0</dd>
</dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- =========== FIELD SUMMARY =========== -->

<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.summary">
<!--   -->
</a>
<h3>Constructor Summary</h3>
<table class="memberSummary" summary="Constructor Summary table, listing constructors, and an explanation" border="0" cellpadding="3" cellspacing="0">
<caption><span>Constructors</span><span class="tabEnd">&nbsp;</span></caption>
<tbody><tr>
<th class="colOne" scope="col">Constructor and Description</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="#String--">String</a></span>()</code>
<div class="block">Initializes a newly created <code>String</code> object so that it represents
 an empty character sequence.</div>
</td>
</tr>
<tr class="altColor">
<td class="colOne"><code><span class="memberNameLink"><a href="#String-java.lang.String-">String</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;original)</code>
<div class="block">Initializes a newly created <code>String</code> object so that it represents
 the same sequence of characters as the argument; in other words, the
 newly created string is a copy of the argument string.</div>
</td>
</tr>
</tbody></table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method.summary">
<!--   -->
</a>
<h3>Method Summary</h3>
<table class="memberSummary" summary="Method Summary table, listing methods, and an explanation" border="0" cellpadding="3" cellspacing="0">
<tbody><tr>
<th class="colFirst" scope="col">Result Type</th>
<th class="colLast" scope="col">Method and Description</th>
</tr>
<tr id="i0" class="rowColor">
<td class="colFirst"><code>char</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#charAt-int-">charAt</a></span>(int&nbsp;index)</code>
<div class="block">Returns the <code>char</code> value at the
 specified index.</div>
</td>
</tr>
<tr id="i4" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#compareTo-java.lang.String-">compareTo</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;anotherString)</code>
<div class="block">Compares two strings lexicographically.</div>
</td>
</tr>
<tr id="i5" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#compareToIgnoreCase-java.lang.String-">compareToIgnoreCase</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</code>
<div class="block">Compares two strings lexicographically, ignoring case
 differences.</div>
</td>
</tr>
<tr id="i6" class="altColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#concat-java.lang.String-">concat</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</code>
<div class="block">Concatenates the specified string to the end of this string.</div>
</td>
</tr>
<tr id="i12" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#endsWith-java.lang.String-">endsWith</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;suffix)</code>
<div class="block">Tests if this string ends with the specified suffix.</div>
</td>
</tr>
<tr id="i13" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#equals-java.lang.Object-">equals</a></span>(<a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;anObject)</code>
<div class="block">Compares this string to the specified object.</div>
</td>
</tr>
<tr id="i14" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#equalsIgnoreCase-java.lang.String-">equalsIgnoreCase</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;anotherString)</code>
<div class="block">Compares this <code>String</code> to another <code>String</code>, ignoring case
 considerations.</div>
</td>
</tr>
<tr id="i22" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#hashCode--">hashCode</a></span>()</code>
<div class="block">Returns a hash code for this string.</div>
</td>
</tr>
<tr id="i23" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#indexOf-int-">indexOf</a></span>(int&nbsp;ch)</code>
<div class="block">Returns the index within this string of the first occurrence of
 the specified character.</div>
</td>
</tr>
<tr id="i24" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#indexOf-int-int-">indexOf</a></span>(int&nbsp;ch,
       int&nbsp;fromIndex)</code>
<div class="block">Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.</div>
</td>
</tr>
<tr id="i25" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#indexOf-java.lang.String-">indexOf</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</code>
<div class="block">Returns the index within this string of the first occurrence of the
 specified substring.</div>
</td>
</tr>
<tr id="i26" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#indexOf-java.lang.String-int-">indexOf</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str,
       int&nbsp;fromIndex)</code>
<div class="block">Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.</div>
</td>
</tr>
<tr id="i27" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#intern--">intern</a></span>()</code>
<div class="block">Returns a canonical representation for the string object.</div>
</td>
</tr>
<tr id="i28" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#isEmpty--">isEmpty</a></span>()</code>
<div class="block">Returns <code>true</code> if, and only if, <a href="#length--"><code>length()</code></a> is <code>0</code>.</div>
</td>
</tr>
<tr id="i31" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#lastIndexOf-int-">lastIndexOf</a></span>(int&nbsp;ch)</code>
<div class="block">Returns the index within this string of the last occurrence of
 the specified character.</div>
</td>
</tr>
<tr id="i32" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#lastIndexOf-int-int-">lastIndexOf</a></span>(int&nbsp;ch,
           int&nbsp;fromIndex)</code>
<div class="block">Returns the index within this string of the last occurrence of
 the specified character, searching backward starting at the
 specified index.</div>
</td>
</tr>
<tr id="i33" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#lastIndexOf-java.lang.String-">lastIndexOf</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</code>
<div class="block">Returns the index within this string of the last occurrence of the
 specified substring.</div>
</td>
</tr>
<tr id="i34" class="altColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#lastIndexOf-java.lang.String-int-">lastIndexOf</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str,
           int&nbsp;fromIndex)</code>
<div class="block">Returns the index within this string of the last occurrence of the
 specified substring, searching backward starting at the specified index.</div>
</td>
</tr>
<tr id="i35" class="rowColor">
<td class="colFirst"><code>int</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#length--">length</a></span>()</code>
<div class="block">Returns the length of this string.</div>
</td>
</tr>
<tr id="i36" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#matches-java.lang.String-">matches</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex)</code>
<div class="block">Tells whether or not this string matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.</div>
</td>
</tr>
<tr id="i38" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#regionMatches-boolean-int-java.lang.String-int-int-">regionMatches</a></span>(boolean&nbsp;ignoreCase,
             int&nbsp;toffset,
             <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;other,
             int&nbsp;ooffset,
             int&nbsp;len)</code>
<div class="block">Tests if two string regions are equal.</div>
</td>
</tr>
<tr id="i39" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#regionMatches-int-java.lang.String-int-int-">regionMatches</a></span>(int&nbsp;toffset,
             <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;other,
             int&nbsp;ooffset,
             int&nbsp;len)</code>
<div class="block">Tests if two string regions are equal.</div>
</td>
</tr>
<tr id="i40" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#replace-char-char-">replace</a></span>(char&nbsp;oldChar,
       char&nbsp;newChar)</code>
<div class="block">Returns a string resulting from replacing all occurrences of
 <code>oldChar</code> in this string with <code>newChar</code>.</div>
</td>
</tr>
<tr id="i42" class="altColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#replaceAll-java.lang.String-java.lang.String-">replaceAll</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex,
          <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replacement)</code>
<div class="block">Replaces each substring of this string that matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
 given replacement.</div>
</td>
</tr>
<tr id="i43" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#replaceFirst-java.lang.String-java.lang.String-">replaceFirst</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex,
            <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replacement)</code>
<div class="block">Replaces the first substring of this string that matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
 given replacement.</div>
</td>
</tr>
<tr id="i46" class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#startsWith-java.lang.String-">startsWith</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;prefix)</code>
<div class="block">Tests if this string starts with the specified prefix.</div>
</td>
</tr>
<tr id="i47" class="rowColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#startsWith-java.lang.String-int-">startsWith</a></span>(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;prefix,
          int&nbsp;toffset)</code>
<div class="block">Tests if the substring of this string beginning at the
 specified index starts with the specified prefix.</div>
</td>
</tr>
<tr id="i49" class="altColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#substring-int-">substring</a></span>(int&nbsp;beginIndex)</code>
<div class="block">Returns a string that is a substring of this string.</div>
</td>
</tr>
<tr id="i50" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#substring-int-int-">substring</a></span>(int&nbsp;beginIndex,
         int&nbsp;endIndex)</code>
<div class="block">Returns a string that is a substring of this string.</div>
</td>
</tr>
<tr id="i52" class="altColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#toLowerCase--">toLowerCase</a></span>()</code>
<div class="block">Converts all of the characters in this <code>String</code> to lower
 case using the rules of the default locale.</div>
</td>
</tr>
<tr id="i54" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#toString--">toString</a></span>()</code>
<div class="block">This object (which is already a string!) is itself returned.</div>
</td>
</tr>
<tr id="i55" class="altColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#toUpperCase--">toUpperCase</a></span>()</code>
<div class="block">Converts all of the characters in this <code>String</code> to upper
 case using the rules of the default locale.</div>
</td>
</tr>
<tr id="i57" class="rowColor">
<td class="colFirst"><code><a href="StringJavaSE8.htm" title="class in java.lang">String</a></code></td>
<td class="colLast"><code><span class="memberNameLink"><a href="#trim--">trim</a></span>()</code>
<div class="block">Returns a string whose value is this string, with any leading and trailing
 whitespace removed.</div>
</td>
</tr>

</tbody></table>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ============ FIELD DETAIL =========== -->

<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor.detail">
<!--   -->
</a>
<h3>Constructor Detail</h3>
<a name="String--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>String</h4>
<pre>public&nbsp;String()</pre>
<div class="block">Initializes a newly created <code>String</code> object so that it represents
 an empty character sequence.  Note that use of this constructor is
 unnecessary since Strings are immutable.</div>
</li>
</ul>
<a name="String-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>String</h4>
<pre>public&nbsp;String(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;original)</pre>
<div class="block">Initializes a newly created <code>String</code> object so that it represents
 the same sequence of characters as the argument; in other words, the
 newly created string is a copy of the argument string. Unless an
 explicit copy of <code>original</code> is needed, use of this constructor is
 unnecessary since Strings are immutable.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>original</code> - A <code>String</code></dd>
</dl>
</li>
</ul>
<a name="String-char:A-">
<!--   -->
</a>
<a name="String-char:A-int-int-">
<!--   -->
</a>
<a name="String-int:A-int-int-">
<!--   -->
</a>
<a name="String-byte:A-int-int-int-">
<!--   -->
</a>
<a name="String-byte:A-int-">
<!--   -->
</a>
<a name="String-byte:A-int-int-java.lang.String-">
<!--   -->
</a>
<a name="String-byte:A-int-int-java.nio.charset.Charset-">
<!--   -->
</a>
<a name="String-byte:A-java.lang.String-">
<!--   -->
</a>
<a name="String-byte:A-java.nio.charset.Charset-">
<!--   -->
</a>
<a name="String-byte:A-int-int-">
<!--   -->
</a>
<a name="String-byte:A-">
<!--   -->
</a>
<a name="String-java.lang.StringBuffer-">
<!--   -->
</a>
<a name="String-java.lang.StringBuilder-">
<!--   -->
</a>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method.detail">
<!--   -->
</a>
<h3>Method Detail</h3>
<a name="length--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>length</h4>
<pre>public&nbsp;int&nbsp;length()</pre>
<div class="block">Returns the length of this string.
 The length is equal to the number of <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#unicode">Unicode
 code units</a> in the string.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#length--">length</a></code>&nbsp;in interface&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the length of the sequence of characters represented by this
          object.</dd>
</dl>
</li>
</ul>
<a name="isEmpty--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isEmpty</h4>
<pre>public&nbsp;boolean&nbsp;isEmpty()</pre>
<div class="block">Returns <code>true</code> if, and only if, <a href="#length--"><code>length()</code></a> is <code>0</code>.</div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if <a href="#length--"><code>length()</code></a> is <code>0</code>, otherwise
 <code>false</code></dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.6</dd>
</dl>
</li>
</ul>
<a name="charAt-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>charAt</h4>
<pre>public&nbsp;char&nbsp;charAt(int&nbsp;index)</pre>
<div class="block">Returns the <code>char</code> value at the
 specified index. An index ranges from <code>0</code> to
 <code>length() - 1</code>. The first <code>char</code> value of the sequence
 is at index <code>0</code>, the next at index <code>1</code>,
 and so on, as for array indexing.

 <p>If the <code>char</code> value specified by the index is a
 <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#unicode">surrogate</a>, the surrogate
 value is returned.</p></div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#charAt-int-">charAt</a></code>&nbsp;in interface&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>index</code> - the index of the <code>char</code> value.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the <code>char</code> value at the specified index of this string.
             The first <code>char</code> value is at index <code>0</code>.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the <code>index</code>
             argument is negative or not less than the length of this
             string.</dd>
</dl>
</li>
</ul>
<a name="equals-java.lang.Object-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equals</h4>
<pre>public&nbsp;boolean&nbsp;equals(<a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" title="class in java.lang">Object</a>&nbsp;anObject)</pre>
<div class="block">Compares this string to the specified object.  The result is <code>true</code> if and only if the argument is not <code>null</code> and is a <code>String</code> object that represents the same sequence of characters as this
 object.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-">equals</a></code>&nbsp;in class&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" title="class in java.lang">Object</a></code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>anObject</code> - The object to compare this <code>String</code> against</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the given object represents a <code>String</code>
          equivalent to this string, <code>false</code> otherwise</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#compareTo-java.lang.String-"><code>compareTo(String)</code></a>, 
<a href="#equalsIgnoreCase-java.lang.String-"><code>equalsIgnoreCase(String)</code></a></dd>
</dl>
</li>
</ul>
<a name="equalsIgnoreCase-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>equalsIgnoreCase</h4>
<pre>public&nbsp;boolean&nbsp;equalsIgnoreCase(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;anotherString)</pre>
<div class="block">Compares this <code>String</code> to another <code>String</code>, ignoring case
 considerations.  Two strings are considered equal ignoring case if they
 are of the same length and corresponding characters in the two strings
 are equal ignoring case.

 <p> Two characters <code>c1</code> and <code>c2</code> are considered the same
 ignoring case if at least one of the following is true:
 </p><ul>
   <li> The two characters are the same (as compared by the
        <code>==</code> operator)
   </li><li> Applying the method <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#toUpperCase-char-"><code>Character.toUpperCase(char)</code></a> to each character
        produces the same result
   </li><li> Applying the method <a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Character.html#toLowerCase-char-"><code>Character.toLowerCase(char)</code></a> to each character
        produces the same result
 </li></ul></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>anotherString</code> - The <code>String</code> to compare this <code>String</code> against</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the argument is not <code>null</code> and it
          represents an equivalent <code>String</code> ignoring case; <code>false</code> otherwise</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#equals-java.lang.Object-"><code>equals(Object)</code></a></dd>
</dl>
</li>
</ul>
<a name="compareTo-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>compareTo</h4>
<pre>public&nbsp;int&nbsp;compareTo(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;anotherString)</pre>
<div class="block">Compares two strings lexicographically.
 The comparison is based on the Unicode value of each character in
 the strings. The character sequence represented by this
 <code>String</code> object is compared lexicographically to the
 character sequence represented by the argument string. The result is
 a negative integer if this <code>String</code> object
 lexicographically precedes the argument string. The result is a
 positive integer if this <code>String</code> object lexicographically
 follows the argument string. The result is zero if the strings
 are equal; <code>compareTo</code> returns <code>0</code> exactly when
 the <a href="#equals-java.lang.Object-"><code>equals(Object)</code></a> method would return <code>true</code>.
 <p>
 This is the definition of lexicographic ordering. If two strings are
 different, then either they have different characters at some index
 that is a valid index for both strings, or their lengths are different,
 or both. If they have different characters at one or more index
 positions, let <i>k</i> be the smallest such index; then the string
 whose character at position <i>k</i> has the smaller value, as
 determined by using the &lt; operator, lexicographically precedes the
 other string. In this case, <code>compareTo</code> returns the
 difference of the two character values at position <code>k</code> in
 the two string -- that is, the value:
 </p><blockquote><pre> this.charAt(k)-anotherString.charAt(k)
 </pre></blockquote>
 If there is no index position at which they differ, then the shorter
 string lexicographically precedes the longer string. In this case,
 <code>compareTo</code> returns the difference of the lengths of the
 strings -- that is, the value:
 <blockquote><pre> this.length()-anotherString.length()
 </pre></blockquote></div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html#compareTo-T-">compareTo</a></code>&nbsp;in interface&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html" title="interface in java.lang">Comparable</a>&lt;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&gt;</code></dd>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>anotherString</code> - the <code>String</code> to be compared.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the value <code>0</code> if the argument string is equal to
          this string; a value less than <code>0</code> if this string
          is lexicographically less than the string argument; and a
          value greater than <code>0</code> if this string is
          lexicographically greater than the string argument.</dd>
</dl>
</li>
</ul>
<a name="compareToIgnoreCase-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>compareToIgnoreCase</h4>
<pre>public&nbsp;int&nbsp;compareToIgnoreCase(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</pre>
<div class="block">Compares two strings lexicographically, ignoring case
 differences. This method returns an integer whose sign is that of
 calling <code>compareTo</code> with normalized versions of the strings
 where case differences have been eliminated by calling
 <code>Character.toLowerCase(Character.toUpperCase(character))</code> on
 each character.
 <p>
 Note that this method does <em>not</em> take locale into account,
 and will result in an unsatisfactory ordering for certain locales.
 The java.text package provides <em>collators</em> to allow
 locale-sensitive ordering.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the <code>String</code> to be compared.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a negative integer, zero, or a positive integer as the
          specified String is greater than, equal to, or less
          than this String, ignoring case considerations.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.2</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="http://docs.oracle.com/javase/8/docs/api/java/text/Collator.html#compare-java.lang.String-java.lang.String-"><code>Collator.compare(String, String)</code></a></dd>
</dl>
</li>
</ul>
<a name="regionMatches-int-java.lang.String-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>regionMatches</h4>
<pre>public&nbsp;boolean&nbsp;regionMatches(int&nbsp;toffset,
                             <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;other,
                             int&nbsp;ooffset,
                             int&nbsp;len)</pre>
<div class="block">Tests if two string regions are equal.
 <p>
 A substring of this <code>String</code> object is compared to a substring
 of the argument other. The result is true if these substrings
 represent identical character sequences. The substring of this
 <code>String</code> object to be compared begins at index <code>toffset</code>
 and has length <code>len</code>. The substring of other to be compared
 begins at index <code>ooffset</code> and has length <code>len</code>. The
 result is <code>false</code> if and only if at least one of the following
 is true:
 </p><ul><li><code>toffset</code> is negative.
 </li><li><code>ooffset</code> is negative.
 </li><li><code>toffset+len</code> is greater than the length of this
 <code>String</code> object.
 </li><li><code>ooffset+len</code> is greater than the length of the other
 argument.
 </li><li>There is some nonnegative integer <i>k</i> less than <code>len</code>
 such that:
 <code>this.charAt(toffset + </code><i>k</i><code>) != other.charAt(ooffset + </code>
 <i>k</i><code>)</code>
 </li></ul></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>toffset</code> - the starting offset of the subregion in this string.</dd>
<dd><code>other</code> - the string argument.</dd>
<dd><code>ooffset</code> - the starting offset of the subregion in the string
                    argument.</dd>
<dd><code>len</code> - the number of characters to compare.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the specified subregion of this string
          exactly matches the specified subregion of the string argument;
          <code>false</code> otherwise.</dd>
</dl>
</li>
</ul>
<a name="regionMatches-boolean-int-java.lang.String-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>regionMatches</h4>
<pre>public&nbsp;boolean&nbsp;regionMatches(boolean&nbsp;ignoreCase,
                             int&nbsp;toffset,
                             <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;other,
                             int&nbsp;ooffset,
                             int&nbsp;len)</pre>
<div class="block">Tests if two string regions are equal.
 <p>
 A substring of this <code>String</code> object is compared to a substring
 of the argument <code>other</code>. The result is <code>true</code> if these
 substrings represent character sequences that are the same, ignoring
 case if and only if <code>ignoreCase</code> is true. The substring of
 this <code>String</code> object to be compared begins at index
 <code>toffset</code> and has length <code>len</code>. The substring of
 <code>other</code> to be compared begins at index <code>ooffset</code> and
 has length <code>len</code>. The result is <code>false</code> if and only if
 at least one of the following is true:
 </p><ul><li><code>toffset</code> is negative.
 </li><li><code>ooffset</code> is negative.
 </li><li><code>toffset+len</code> is greater than the length of this
 <code>String</code> object.
 </li><li><code>ooffset+len</code> is greater than the length of the other
 argument.
 </li><li><code>ignoreCase</code> is <code>false</code> and there is some nonnegative
 integer <i>k</i> less than <code>len</code> such that:
 <blockquote><pre> this.charAt(toffset+k) != other.charAt(ooffset+k)
 </pre></blockquote>
 </li><li><code>ignoreCase</code> is <code>true</code> and there is some nonnegative
 integer <i>k</i> less than <code>len</code> such that:
 <blockquote><pre> Character.toLowerCase(this.charAt(toffset+k)) !=
     Character.toLowerCase(other.charAt(ooffset+k))
 </pre></blockquote>
 and:
 <blockquote><pre> Character.toUpperCase(this.charAt(toffset+k)) !=
         Character.toUpperCase(other.charAt(ooffset+k))
 </pre></blockquote>
 </li></ul></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ignoreCase</code> - if <code>true</code>, ignore case when comparing
                       characters.</dd>
<dd><code>toffset</code> - the starting offset of the subregion in this
                       string.</dd>
<dd><code>other</code> - the string argument.</dd>
<dd><code>ooffset</code> - the starting offset of the subregion in the string
                       argument.</dd>
<dd><code>len</code> - the number of characters to compare.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the specified subregion of this string
          matches the specified subregion of the string argument;
          <code>false</code> otherwise. Whether the matching is exact
          or case insensitive depends on the <code>ignoreCase</code>
          argument.</dd>
</dl>
</li>
</ul>
<a name="startsWith-java.lang.String-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startsWith</h4>
<pre>public&nbsp;boolean&nbsp;startsWith(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;prefix,
                          int&nbsp;toffset)</pre>
<div class="block">Tests if the substring of this string beginning at the
 specified index starts with the specified prefix.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>prefix</code> - the prefix.</dd>
<dd><code>toffset</code> - where to begin looking in this string.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the character sequence represented by the
          argument is a prefix of the substring of this object starting
          at index <code>toffset</code>; <code>false</code> otherwise.
          The result is <code>false</code> if <code>toffset</code> is
          negative or greater than the length of this
          <code>String</code> object; otherwise the result is the same
          as the result of the expression
          <pre>          this.substring(toffset).startsWith(prefix)
          </pre></dd>
</dl>
</li>
</ul>
<a name="startsWith-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>startsWith</h4>
<pre>public&nbsp;boolean&nbsp;startsWith(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;prefix)</pre>
<div class="block">Tests if this string starts with the specified prefix.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>prefix</code> - the prefix.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the character sequence represented by the
          argument is a prefix of the character sequence represented by
          this string; <code>false</code> otherwise.
          Note also that <code>true</code> will be returned if the
          argument is an empty string or is equal to this
          <code>String</code> object as determined by the
          <a href="#equals-java.lang.Object-"><code>equals(Object)</code></a> method.</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1. 0</dd>
</dl>
</li>
</ul>
<a name="endsWith-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>endsWith</h4>
<pre>public&nbsp;boolean&nbsp;endsWith(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;suffix)</pre>
<div class="block">Tests if this string ends with the specified suffix.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>suffix</code> - the suffix.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if the character sequence represented by the
          argument is a suffix of the character sequence represented by
          this object; <code>false</code> otherwise. Note that the
          result will be <code>true</code> if the argument is the
          empty string or is equal to this <code>String</code> object
          as determined by the <a href="#equals-java.lang.Object-"><code>equals(Object)</code></a> method.</dd>
</dl>
</li>
</ul>
<a name="hashCode--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>hashCode</h4>
<pre>public&nbsp;int&nbsp;hashCode()</pre>
<div class="block">Returns a hash code for this string. The hash code for a
 <code>String</code> object is computed as
 <blockquote><pre> s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 </pre></blockquote>
 using <code>int</code> arithmetic, where <code>s[i]</code> is the
 <i>i</i>th character of the string, <code>n</code> is the length of
 the string, and <code>^</code> indicates exponentiation.
 (The hash value of the empty string is zero.)</div>
<dl>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#hashCode--">hashCode</a></code>&nbsp;in class&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" title="class in java.lang">Object</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a hash code value for this object.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#equals-java.lang.Object-"><code>Object.equals(java.lang.Object)</code></a>, 
<a href="http://docs.oracle.com/javase/8/docs/api/java/lang/System.html#identityHashCode-java.lang.Object-"><code>System.identityHashCode(java.lang.Object)</code></a></dd>
</dl>
</li>
</ul>
<a name="indexOf-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indexOf</h4>
<pre>public&nbsp;int&nbsp;indexOf(int&nbsp;ch)</pre>
<div class="block">Returns the index within this string of the first occurrence of
 the specified character. If a character with value
 <code>ch</code> occurs in the character sequence represented by
 this <code>String</code> object, then the index (in Unicode
 code units) of the first such occurrence is returned. For
 values of <code>ch</code> in the range from 0 to 0xFFFF
 (inclusive), this is the smallest value <i>k</i> such that:
 <blockquote><pre> this.charAt(<i>k</i>) == ch
 </pre></blockquote>
 is true. For other values of <code>ch</code>, it is the
 smallest value <i>k</i> such that:
 <blockquote><pre> this.codePointAt(<i>k</i>) == ch
 </pre></blockquote>
 is true. In either case, if no such character occurs in this
 string, then <code>-1</code> is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ch</code> - a character (Unicode code point).</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the first occurrence of the character in the
          character sequence represented by this object, or
          <code>-1</code> if the character does not occur.</dd>
</dl>
</li>
</ul>
<a name="indexOf-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indexOf</h4>
<pre>public&nbsp;int&nbsp;indexOf(int&nbsp;ch,
                   int&nbsp;fromIndex)</pre>
<div class="block">Returns the index within this string of the first occurrence of the
 specified character, starting the search at the specified index.
 <p>
 If a character with value <code>ch</code> occurs in the
 character sequence represented by this <code>String</code>
 object at an index no smaller than <code>fromIndex</code>, then
 the index of the first such occurrence is returned. For values
 of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),
 this is the smallest value <i>k</i> such that:
 </p><blockquote><pre> (this.charAt(<i>k</i>) == ch) <code> &amp;&amp;</code> (<i>k</i> &gt;= fromIndex)
 </pre></blockquote>
 is true. For other values of <code>ch</code>, it is the
 smallest value <i>k</i> such that:
 <blockquote><pre> (this.codePointAt(<i>k</i>) == ch) <code> &amp;&amp;</code> (<i>k</i> &gt;= fromIndex)
 </pre></blockquote>
 is true. In either case, if no such character occurs in this
 string at or after position <code>fromIndex</code>, then
 <code>-1</code> is returned.

 <p>
 There is no restriction on the value of <code>fromIndex</code>. If it
 is negative, it has the same effect as if it were zero: this entire
 string may be searched. If it is greater than the length of this
 string, it has the same effect as if it were equal to the length of
 this string: <code>-1</code> is returned.

 </p><p>All indices are specified in <code>char</code> values
 (Unicode code units).</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ch</code> - a character (Unicode code point).</dd>
<dd><code>fromIndex</code> - the index to start the search from.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the first occurrence of the character in the
          character sequence represented by this object that is greater
          than or equal to <code>fromIndex</code>, or <code>-1</code>
          if the character does not occur.</dd>
</dl>
</li>
</ul>
<a name="lastIndexOf-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lastIndexOf</h4>
<pre>public&nbsp;int&nbsp;lastIndexOf(int&nbsp;ch)</pre>
<div class="block">Returns the index within this string of the last occurrence of
 the specified character. For values of <code>ch</code> in the
 range from 0 to 0xFFFF (inclusive), the index (in Unicode code
 units) returned is the largest value <i>k</i> such that:
 <blockquote><pre> this.charAt(<i>k</i>) == ch
 </pre></blockquote>
 is true. For other values of <code>ch</code>, it is the
 largest value <i>k</i> such that:
 <blockquote><pre> this.codePointAt(<i>k</i>) == ch
 </pre></blockquote>
 is true.  In either case, if no such character occurs in this
 string, then <code>-1</code> is returned.  The
 <code>String</code> is searched backwards starting at the last
 character.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ch</code> - a character (Unicode code point).</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the last occurrence of the character in the
          character sequence represented by this object, or
          <code>-1</code> if the character does not occur.</dd>
</dl>
</li>
</ul>
<a name="lastIndexOf-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lastIndexOf</h4>
<pre>public&nbsp;int&nbsp;lastIndexOf(int&nbsp;ch,
                       int&nbsp;fromIndex)</pre>
<div class="block">Returns the index within this string of the last occurrence of
 the specified character, searching backward starting at the
 specified index. For values of <code>ch</code> in the range
 from 0 to 0xFFFF (inclusive), the index returned is the largest
 value <i>k</i> such that:
 <blockquote><pre> (this.charAt(<i>k</i>) == ch) <code> &amp;&amp;</code> (<i>k</i> &lt;= fromIndex)
 </pre></blockquote>
 is true. For other values of <code>ch</code>, it is the
 largest value <i>k</i> such that:
 <blockquote><pre> (this.codePointAt(<i>k</i>) == ch) <code> &amp;&amp;</code> (<i>k</i> &lt;= fromIndex)
 </pre></blockquote>
 is true. In either case, if no such character occurs in this
 string at or before position <code>fromIndex</code>, then
 <code>-1</code> is returned.

 <p>All indices are specified in <code>char</code> values
 (Unicode code units).</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>ch</code> - a character (Unicode code point).</dd>
<dd><code>fromIndex</code> - the index to start the search from. There is no
          restriction on the value of <code>fromIndex</code>. If it is
          greater than or equal to the length of this string, it has
          the same effect as if it were equal to one less than the
          length of this string: this entire string may be searched.
          If it is negative, it has the same effect as if it were -1:
          -1 is returned.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the last occurrence of the character in the
          character sequence represented by this object that is less
          than or equal to <code>fromIndex</code>, or <code>-1</code>
          if the character does not occur before that point.</dd>
</dl>
</li>
</ul>
<a name="indexOf-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indexOf</h4>
<pre>public&nbsp;int&nbsp;indexOf(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</pre>
<div class="block">Returns the index within this string of the first occurrence of the
 specified substring.

 <p>The returned index is the smallest value <i>k</i> for which:
 </p><blockquote><pre> this.startsWith(str, <i>k</i>)
 </pre></blockquote>
 If no such value of <i>k</i> exists, then <code>-1</code> is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the substring to search for.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the first occurrence of the specified substring,
          or <code>-1</code> if there is no such occurrence.</dd>
</dl>
</li>
</ul>
<a name="indexOf-java.lang.String-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>indexOf</h4>
<pre>public&nbsp;int&nbsp;indexOf(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str,
                   int&nbsp;fromIndex)</pre>
<div class="block">Returns the index within this string of the first occurrence of the
 specified substring, starting at the specified index.

 <p>The returned index is the smallest value <i>k</i> for which:
 </p><blockquote><pre> <i>k</i> &gt;= fromIndex <code> &amp;&amp;</code> this.startsWith(str, <i>k</i>)
 </pre></blockquote>
 If no such value of <i>k</i> exists, then <code>-1</code> is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the substring to search for.</dd>
<dd><code>fromIndex</code> - the index from which to start the search.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the first occurrence of the specified substring,
          starting at the specified index,
          or <code>-1</code> if there is no such occurrence.</dd>
</dl>
</li>
</ul>
<a name="lastIndexOf-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lastIndexOf</h4>
<pre>public&nbsp;int&nbsp;lastIndexOf(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</pre>
<div class="block">Returns the index within this string of the last occurrence of the
 specified substring.  The last occurrence of the empty string ""
 is considered to occur at the index value <code>this.length()</code>.

 <p>The returned index is the largest value <i>k</i> for which:
 </p><blockquote><pre> this.startsWith(str, <i>k</i>)
 </pre></blockquote>
 If no such value of <i>k</i> exists, then <code>-1</code> is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the substring to search for.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the last occurrence of the specified substring,
          or <code>-1</code> if there is no such occurrence.</dd>
</dl>
</li>
</ul>
<a name="lastIndexOf-java.lang.String-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>lastIndexOf</h4>
<pre>public&nbsp;int&nbsp;lastIndexOf(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str,
                       int&nbsp;fromIndex)</pre>
<div class="block">Returns the index within this string of the last occurrence of the
 specified substring, searching backward starting at the specified index.

 <p>The returned index is the largest value <i>k</i> for which:
 </p><blockquote><pre> <i>k</i> <code> &lt;=</code> fromIndex <code> &amp;&amp;</code> this.startsWith(str, <i>k</i>)
 </pre></blockquote>
 If no such value of <i>k</i> exists, then <code>-1</code> is returned.</div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the substring to search for.</dd>
<dd><code>fromIndex</code> - the index to start the search from.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the index of the last occurrence of the specified substring,
          searching backward from the specified index,
          or <code>-1</code> if there is no such occurrence.</dd>
</dl>
</li>
</ul>
<a name="substring-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>substring</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;substring(int&nbsp;beginIndex)</pre>
<div class="block">Returns a string that is a substring of this string. The
 substring begins with the character at the specified index and
 extends to the end of this string. <p>
 Examples:
 </p><blockquote><pre> "unhappy".substring(2) returns "happy"
 "Harbison".substring(3) returns "bison"
 "emptiness".substring(9) returns "" (an empty string)
 </pre></blockquote></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>beginIndex</code> - the beginning index, inclusive.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the specified substring.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if
             <code>beginIndex</code> is negative or larger than the
             length of this <code>String</code> object.</dd>
</dl>
</li>
</ul>
<a name="substring-int-int-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>substring</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;substring(int&nbsp;beginIndex,
                        int&nbsp;endIndex)</pre>
<div class="block">Returns a string that is a substring of this string. The
 substring begins at the specified <code>beginIndex</code> and
 extends to the character at index <code>endIndex - 1</code>.
 Thus the length of the substring is <code>endIndex-beginIndex</code>.
 <p>
 Examples:
 </p><blockquote><pre> "hamburger".substring(4, 8) returns "urge"
 "smiles".substring(1, 5) returns "mile"
 </pre></blockquote></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>beginIndex</code> - the beginning index, inclusive.</dd>
<dd><code>endIndex</code> - the ending index, exclusive.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the specified substring.</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/IndexOutOfBoundsException.html" title="class in java.lang">IndexOutOfBoundsException</a></code> - if the
             <code>beginIndex</code> is negative, or
             <code>endIndex</code> is larger than the length of
             this <code>String</code> object, or
             <code>beginIndex</code> is larger than
             <code>endIndex</code>.</dd>
</dl>
</li>
</ul>
<a name="concat-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>concat</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;concat(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;str)</pre>
<div class="block">Concatenates the specified string to the end of this string.
 <p>
 If the length of the argument string is <code>0</code>, then this
 <code>String</code> object is returned. Otherwise, a
 <code>String</code> object is returned that represents a character
 sequence that is the concatenation of the character sequence
 represented by this <code>String</code> object and the character
 sequence represented by the argument string.</p><p>
 Examples:
 </p><blockquote><pre> "cares".concat("s") returns "caress"
 "to".concat("get").concat("her") returns "together"
 </pre></blockquote></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>str</code> - the <code>String</code> that is concatenated to the end
                of this <code>String</code>.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a string that represents the concatenation of this object's
          characters followed by the string argument's characters.</dd>
</dl>
</li>
</ul>
<a name="replace-char-char-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replace</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replace(char&nbsp;oldChar,
                      char&nbsp;newChar)</pre>
<div class="block">Returns a string resulting from replacing all occurrences of
 <code>oldChar</code> in this string with <code>newChar</code>.
 <p>
 If the character <code>oldChar</code> does not occur in the
 character sequence represented by this <code>String</code> object,
 then a reference to this <code>String</code> object is returned.
 Otherwise, a <code>String</code> object is returned that
 represents a character sequence identical to the character sequence
 represented by this <code>String</code> object, except that every
 occurrence of <code>oldChar</code> is replaced by an occurrence
 of <code>newChar</code>.
 </p><p>
 Examples:
 </p><blockquote><pre> "mesquite in your cellar".replace('e', 'o')
         returns "mosquito in your collar"
 "the war of baronets".replace('r', 'y')
         returns "the way of bayonets"
 "sparring with a purple porpoise".replace('p', 't')
         returns "starring with a turtle tortoise"
 "JonL".replace('q', 'x') returns "JonL" (no change)
 </pre></blockquote></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>oldChar</code> - the old character.</dd>
<dd><code>newChar</code> - the new character.</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a string derived from this string by replacing every
          occurrence of <code>oldChar</code> with <code>newChar</code>.</dd>
</dl>
</li>
</ul>
<a name="matches-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>matches</h4>
<pre>public&nbsp;boolean&nbsp;matches(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex)</pre>
<div class="block">Tells whether or not this string matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a>.

 <p> An invocation of this method of the form
 <i>str</i><code>.matches(</code><i>regex</i><code>)</code> yields exactly the
 same result as the expression

 </p><blockquote>
 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a>.<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#matches-java.lang.String-java.lang.CharSequence-"><code>matches(<i>regex</i>, <i>str</i>)</code></a>
 </blockquote></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>regex</code> - the regular expression to which this string is to be matched</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd><code>true</code> if, and only if, this string matches the
          given regular expression</dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.4</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a></dd>
</dl>
</li>
</ul>
<a name="replaceFirst-java.lang.String-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replaceFirst</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replaceFirst(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex,
                           <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replacement)</pre>
<div class="block">Replaces the first substring of this string that matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
 given replacement.

 <p> An invocation of this method of the form
 <i>str</i><code>.replaceFirst(</code><i>regex</i><code>,</code> <i>repl</i><code>)</code>
 yields exactly the same result as the expression

 </p><blockquote>
 <code>
 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a>.<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#compile-java.lang.String-"><code>compile</code></a>(<i>regex</i>).<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#matcher-java.lang.CharSequence-"><code>matcher</code></a>(<i>str</i>).<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceFirst-java.lang.String-"><code>replaceFirst</code></a>(<i>repl</i>)
 </code>
 </blockquote>

<p>
 Note that backslashes (<code>\</code>) and dollar signs (<code>$</code>) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceFirst-java.lang.String-"><code>Matcher.replaceFirst(java.lang.String)</code></a>.
 Use <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#quoteReplacement-java.lang.String-"><code>Matcher.quoteReplacement(java.lang.String)</code></a> to suppress the special
 meaning of these characters, if desired.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>regex</code> - the regular expression to which this string is to be matched</dd>
<dd><code>replacement</code> - the string to be substituted for the first match</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The resulting <code>String</code></dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.4</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a></dd>
</dl>
</li>
</ul>
<a name="replaceAll-java.lang.String-java.lang.String-">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>replaceAll</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replaceAll(<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;regex,
                         <a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;replacement)</pre>
<div class="block">Replaces each substring of this string that matches the given <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#sum">regular expression</a> with the
 given replacement.

 <p> An invocation of this method of the form
 <i>str</i><code>.replaceAll(</code><i>regex</i><code>,</code> <i>repl</i><code>)</code>
 yields exactly the same result as the expression

 </p><blockquote>
 <code>
 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a>.<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#compile-java.lang.String-"><code>compile</code></a>(<i>regex</i>).<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html#matcher-java.lang.CharSequence-"><code>matcher</code></a>(<i>str</i>).<a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceAll-java.lang.String-"><code>replaceAll</code></a>(<i>repl</i>)
 </code>
 </blockquote>

<p>
 Note that backslashes (<code>\</code>) and dollar signs (<code>$</code>) in the
 replacement string may cause the results to be different than if it were
 being treated as a literal replacement string; see
 <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#replaceAll-java.lang.String-"><code>Matcher.replaceAll</code></a>.
 Use <a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Matcher.html#quoteReplacement-java.lang.String-"><code>Matcher.quoteReplacement(java.lang.String)</code></a> to suppress the special
 meaning of these characters, if desired.</p></div>
<dl>
<dt><span class="paramLabel">Parameters:</span></dt>
<dd><code>regex</code> - the regular expression to which this string is to be matched</dd>
<dd><code>replacement</code> - the string to be substituted for each match</dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>The resulting <code>String</code></dd>
<dt><span class="throwsLabel">Throws:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/PatternSyntaxException.html" title="class in java.util.regex">PatternSyntaxException</a></code> - if the regular expression's syntax is invalid</dd>
<dt><span class="simpleTagLabel">Since:</span></dt>
<dd>1.4</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="http://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html" title="class in java.util.regex"><code>Pattern</code></a></dd>
</dl>
</li>
</ul>
<a name="toLowerCase--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toLowerCase</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;toLowerCase()</pre>
<div class="block">Converts all of the characters in this <code>String</code> to lower
 case using the rules of the default locale. This is equivalent to calling
 <code>toLowerCase(Locale.getDefault())</code>.
 <p>
 <b>Note:</b> This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, <code>"TITLE".toLowerCase()</code> in a Turkish locale
 returns <code>"t\u0131tle"</code>, where '\u0131' is the
 LATIN SMALL LETTER DOTLESS I character.
 To obtain correct results for locale insensitive strings, use
 <code>toLowerCase(Locale.ROOT)</code>.
 </p><p></p></div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the <code>String</code>, converted to lowercase.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#toLowerCase-java.util.Locale-"><code>toLowerCase(Locale)</code></a></dd>
</dl>
</li>
</ul>
<a name="toUpperCase--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toUpperCase</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;toUpperCase()</pre>
<div class="block">Converts all of the characters in this <code>String</code> to upper
 case using the rules of the default locale. This method is equivalent to
 <code>toUpperCase(Locale.getDefault())</code>.
 <p>
 <b>Note:</b> This method is locale sensitive, and may produce unexpected
 results if used for strings that are intended to be interpreted locale
 independently.
 Examples are programming language identifiers, protocol keys, and HTML
 tags.
 For instance, <code>"title".toUpperCase()</code> in a Turkish locale
 returns <code>"T\u0130TLE"</code>, where '\u0130' is the
 LATIN CAPITAL LETTER I WITH DOT ABOVE character.
 To obtain correct results for locale insensitive strings, use
 <code>toUpperCase(Locale.ROOT)</code>.
 </p><p></p></div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the <code>String</code>, converted to uppercase.</dd>
<dt><span class="seeLabel">See Also:</span></dt>
<dd><a href="#toUpperCase-java.util.Locale-"><code>toUpperCase(Locale)</code></a></dd>
</dl>
</li>
</ul>
<a name="trim--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>trim</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;trim()</pre>
<div class="block">Returns a string whose value is this string, with any leading and trailing
 whitespace removed.
 <p>
 If this <code>String</code> object represents an empty character
 sequence, or the first and last characters of character sequence
 represented by this <code>String</code> object both have codes
 greater than <code>'\u0020'</code> (the space character), then a
 reference to this <code>String</code> object is returned.
 </p><p>
 Otherwise, if there is no character with a code greater than
 <code>'\u0020'</code> in the string, then a
 <code>String</code> object representing an empty string is
 returned.
 </p><p>
 Otherwise, let <i>k</i> be the index of the first character in the
 string whose code is greater than <code>'\u0020'</code>, and let
 <i>m</i> be the index of the last character in the string whose code
 is greater than <code>'\u0020'</code>. A <code>String</code>
 object is returned, representing the substring of this string that
 begins with the character at index <i>k</i> and ends with the
 character at index <i>m</i>-that is, the result of
 <code>this.substring(k, m + 1)</code>.
 </p><p>
 This method may be used to trim whitespace (as defined above) from
 the beginning and end of a string.</p></div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>A string whose value is this string, with any leading and trailing white
          space removed, or this string if it has no leading or
          trailing white space.</dd>
</dl>
</li>
</ul>
<a name="toString--">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>toString</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;toString()</pre>
<div class="block">This object (which is already a string!) is itself returned.</div>
<dl>
<dt><span class="overrideSpecifyLabel">Specified by:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html#toString--">toString</a></code>&nbsp;in interface&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/CharSequence.html" title="interface in java.lang">CharSequence</a></code></dd>
<dt><span class="overrideSpecifyLabel">Overrides:</span></dt>
<dd><code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html#toString--">toString</a></code>&nbsp;in class&nbsp;<code><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/Object.html" title="class in java.lang">Object</a></code></dd>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>the string itself.</dd>
</dl>
</li>
</ul>
<a name="intern--">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>intern</h4>
<pre>public&nbsp;<a href="StringJavaSE8.htm" title="class in java.lang">String</a>&nbsp;intern()</pre>
<div class="block">Returns a canonical representation for the string object.
 <p>
 A pool of strings, initially empty, is maintained privately by the
 class <code>String</code>.
 </p><p>
 When the intern method is invoked, if the pool already contains a
 string equal to this <code>String</code> object as determined by
 the <a href="#equals-java.lang.Object-"><code>equals(Object)</code></a> method, then the string from the pool is
 returned. Otherwise, this <code>String</code> object is added to the
 pool and a reference to this <code>String</code> object is returned.
 </p><p>
 It follows that for any two strings <code>s</code> and <code>t</code>,
 <code>s.intern() == t.intern()</code> is <code>true</code>
 if and only if <code>s.equals(t)</code> is <code>true</code>.
 </p><p>
 All literal strings and string-valued constant expressions are
 interned. String literals are defined in section 3.10.5 of the
 <cite>The Java™ Language Specification</cite>.</p></div>
<dl>
<dt><span class="returnLabel">Returns:</span></dt>
<dd>a string that has the same contents as this string, but is
          guaranteed to be from a pool of unique strings.</dd>
</dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar.bottom">
<!--   -->
</a>
<div class="skipNav"><a href="#skip.navbar.bottom" title="Skip navigation links">Skip navigation links</a></div>
<a name="navbar.bottom.firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="http://docs.oracle.com/javase/8/docs/api/overview-summary.html">Overview</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/package-summary.html">Package</a></li>
<li class="navBarCell1Rev">Class</li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/class-use/String.html">Use</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/package-tree.html">Tree</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/deprecated-list.html">Deprecated</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/index-files/index-1.html">Index</a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/help-doc.html">Help</a></li>
</ul>
<div class="aboutLanguage"><strong>Java™&nbsp;Platform<br>Standard&nbsp;Ed.&nbsp;8</strong></div>
</div>
<div class="subNav">
<ul class="navList">
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StrictMath.html" title="class in java.lang"><span class="typeNameLink">Prev&nbsp;Class</span></a></li>
<li><a href="http://docs.oracle.com/javase/8/docs/api/java/lang/StringBuffer.html" title="class in java.lang"><span class="typeNameLink">Next&nbsp;Class</span></a></li>
</ul>
<ul class="navList">
<li><a href="http://docs.oracle.com/javase/8/docs/api/index.html?java/lang/String.html" target="_top">Frames</a></li>
<li><a href="StringJavaSE8.htm" target="_top">No&nbsp;Frames</a></li>
</ul>
<ul style="display: block;" class="navList" id="allclasses_navbar_bottom">
<li><a href="http://docs.oracle.com/javase/8/docs/api/allclasses-noframe.html">All&nbsp;Classes</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>Summary:&nbsp;</li>
<li>Nested&nbsp;|&nbsp;</li>
<li><a href="#field.summary">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.summary">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.summary">Method</a></li>
</ul>
<ul class="subNavList">
<li>Detail:&nbsp;</li>
<li><a href="#field.detail">Field</a>&nbsp;|&nbsp;</li>
<li><a href="#constructor.detail">Constr</a>&nbsp;|&nbsp;</li>
<li><a href="#method.detail">Method</a></li>
</ul>
</div>
<a name="skip.navbar.bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
<p class="legalCopy"><small><font size="-1"> <a href="http://bugreport.sun.com/bugreport/">Submit a bug or feature</a> <br>For further API reference and developer documentation, see <a href="https://docs.oracle.com/javase/8/docs/index.html" target="_blank">Java SE Documentation</a>.
 That documentation contains more detailed, developer-targeted 
descriptions, with conceptual overviews, definitions of terms, 
workarounds, and working code examples.<br> <a href="http://docs.oracle.com/javase/8/docs/legal/cpyr.html">Copyright</a> © 1993, 2015, Oracle and/or its affiliates.  All rights reserved. </font></small></p>
<!-- Start SiteCatalyst code   -->
<script type="application/javascript" src="StringJavaSE8-Dateien/ora_docs.js"></script><script src="StringJavaSE8-Dateien/ora_code_docs.js" type="application/javascript"></script><script src="StringJavaSE8-Dateien/ora_code.js" type="application/javascript"></script>
<!-- End SiteCatalyst code -->
<noscript>
<p>Scripting on this page tracks web page traffic, but does not change the content in any way.</p>
</noscript>


</body></html>